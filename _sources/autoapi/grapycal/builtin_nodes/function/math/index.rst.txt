:py:mod:`grapycal.builtin_nodes.function.math`
==============================================

.. py:module:: grapycal.builtin_nodes.function.math


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   grapycal.builtin_nodes.function.math.AdditionNode
   grapycal.builtin_nodes.function.math.SubtractionNode
   grapycal.builtin_nodes.function.math.MultiplicationNode
   grapycal.builtin_nodes.function.math.DivisionNode




.. py:class:: AdditionNode


   Bases: :py:obj:`grapycal.sobjects.functionNode.FunctionNode`

   .. py:attribute:: category
      :value: 'function/math'

      

   .. py:attribute:: inputs
      :value: ['items']

      

   .. py:attribute:: input_edge_limit
      :value: [None]

      

   .. py:attribute:: outputs
      :value: ['sum']

      

   .. py:attribute:: display_port_names
      :value: False

      

   .. py:method:: build_node()

      Create attributes, ports, and controls here.

      Note: 
          This method will not be called when the object is being restored. The child objects will be restored automatically instead of
      running this method again.


   .. py:method:: calculate(data)

      Define the function of this node here.

      :param inputs: A list of lists. Each list contains the data from one input port. For example, if there is only one input port with two            edges connected, the value of inputs will be `[[data_from_edge_1, data_from_edge_2]]`.
      :return: A list of outputs. Each entry in the list will be pushed to one output port. For example, if there is only one output port,            the value of the return suold be `[data_to_port]`. If there are multiple edges connected to one output port,            they will all receive the same data.

      Examples::

          class SumNode(FunctionNode):
              inputs = ['items']
              outputs = ['sum']
              ...
              def calculate(self, inputs):
                  inp = inputs[0] # Retrieve the data from the input port
                  return [sum(inp)] # Return the sum of the data



.. py:class:: SubtractionNode


   Bases: :py:obj:`grapycal.sobjects.functionNode.FunctionNode`

   .. py:attribute:: category
      :value: 'function/math'

      

   .. py:attribute:: inputs
      :value: ['a', 'b']

      

   .. py:attribute:: input_edge_limit
      :value: [None, None]

      

   .. py:attribute:: outputs
      :value: ['a-b']

      

   .. py:attribute:: display_port_names
      :value: False

      

   .. py:method:: build_node()

      Create attributes, ports, and controls here.

      Note: 
          This method will not be called when the object is being restored. The child objects will be restored automatically instead of
      running this method again.


   .. py:method:: calculate(data)

      Define the function of this node here.

      :param inputs: A list of lists. Each list contains the data from one input port. For example, if there is only one input port with two            edges connected, the value of inputs will be `[[data_from_edge_1, data_from_edge_2]]`.
      :return: A list of outputs. Each entry in the list will be pushed to one output port. For example, if there is only one output port,            the value of the return suold be `[data_to_port]`. If there are multiple edges connected to one output port,            they will all receive the same data.

      Examples::

          class SumNode(FunctionNode):
              inputs = ['items']
              outputs = ['sum']
              ...
              def calculate(self, inputs):
                  inp = inputs[0] # Retrieve the data from the input port
                  return [sum(inp)] # Return the sum of the data



.. py:class:: MultiplicationNode


   Bases: :py:obj:`grapycal.sobjects.functionNode.FunctionNode`

   .. py:attribute:: category
      :value: 'function/math'

      

   .. py:attribute:: inputs
      :value: ['items']

      

   .. py:attribute:: input_edge_limit
      :value: [None]

      

   .. py:attribute:: outputs
      :value: ['product']

      

   .. py:attribute:: display_port_names
      :value: False

      

   .. py:method:: build_node()

      Create attributes, ports, and controls here.

      Note: 
          This method will not be called when the object is being restored. The child objects will be restored automatically instead of
      running this method again.


   .. py:method:: calculate(data)

      Define the function of this node here.

      :param inputs: A list of lists. Each list contains the data from one input port. For example, if there is only one input port with two            edges connected, the value of inputs will be `[[data_from_edge_1, data_from_edge_2]]`.
      :return: A list of outputs. Each entry in the list will be pushed to one output port. For example, if there is only one output port,            the value of the return suold be `[data_to_port]`. If there are multiple edges connected to one output port,            they will all receive the same data.

      Examples::

          class SumNode(FunctionNode):
              inputs = ['items']
              outputs = ['sum']
              ...
              def calculate(self, inputs):
                  inp = inputs[0] # Retrieve the data from the input port
                  return [sum(inp)] # Return the sum of the data



.. py:class:: DivisionNode


   Bases: :py:obj:`grapycal.sobjects.functionNode.FunctionNode`

   .. py:attribute:: category
      :value: 'function/math'

      

   .. py:attribute:: inputs
      :value: ['a', 'b']

      

   .. py:attribute:: input_edge_limit
      :value: [None, None]

      

   .. py:attribute:: outputs
      :value: ['a/b']

      

   .. py:attribute:: display_port_names
      :value: False

      

   .. py:method:: build_node()

      Create attributes, ports, and controls here.

      Note: 
          This method will not be called when the object is being restored. The child objects will be restored automatically instead of
      running this method again.


   .. py:method:: calculate(data)

      Define the function of this node here.

      :param inputs: A list of lists. Each list contains the data from one input port. For example, if there is only one input port with two            edges connected, the value of inputs will be `[[data_from_edge_1, data_from_edge_2]]`.
      :return: A list of outputs. Each entry in the list will be pushed to one output port. For example, if there is only one output port,            the value of the return suold be `[data_to_port]`. If there are multiple edges connected to one output port,            they will all receive the same data.

      Examples::

          class SumNode(FunctionNode):
              inputs = ['items']
              outputs = ['sum']
              ...
              def calculate(self, inputs):
                  inp = inputs[0] # Retrieve the data from the input port
                  return [sum(inp)] # Return the sum of the data



