:py:mod:`grapycal.builtin_nodes.function`
=========================================

.. py:module:: grapycal.builtin_nodes.function


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   math/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   grapycal.builtin_nodes.function.Node
   grapycal.builtin_nodes.function.TextControl
   grapycal.builtin_nodes.function.Edge
   grapycal.builtin_nodes.function.InputPort
   grapycal.builtin_nodes.function.OutputPort
   grapycal.builtin_nodes.function.FunctionNode
   grapycal.builtin_nodes.function.AdditionNode
   grapycal.builtin_nodes.function.SubtractionNode
   grapycal.builtin_nodes.function.MultiplicationNode
   grapycal.builtin_nodes.function.DivisionNode
   grapycal.builtin_nodes.function.LambdaNode




.. py:class:: Node


   Bases: :py:obj:`objectsync.SObject`

   .. py:attribute:: frontend_type
      :value: 'Node'

      

   .. py:attribute:: category
      :value: 'hidden'

      

   .. py:attribute:: T

      

   .. py:attribute:: T1

      

   .. py:method:: initialize(*args, **kwargs)


   .. py:method:: build(is_preview=False, **build_node_args)


   .. py:method:: build_node()

      Create attributes, ports, and controls here.

      Note: 
          This method will not be called when the object is being restored. The child objects will be restored automatically instead of
      running this method again.


   .. py:method:: init()

      This method is called after the node is built and its ports and controls are created. Use this method if you want to do something after
      the node is built.


   .. py:method:: _spawn(client_id)

      Called when a client wants to spawn a node.


   .. py:method:: destroy() -> objectsync.sobject.SObjectSerialized

      Called when the node is destroyed. You can override this method to do something before the node is destroyed.
      Overrided methods should call return super().destroy() at the end.


   .. py:method:: add_in_port(name: str, max_edges=64, display_name=None)

      Add an input port to the node.


   .. py:method:: add_out_port(name: str, max_edges=64, display_name=None)

      Add an output port to the node.


   .. py:method:: remove_in_port(name: str)

      Remove an input port from the node.


   .. py:method:: remove_out_port(name: str)

      Remove an output port from the node.


   .. py:method:: get_in_port(name: str) -> grapycal.sobjects.port.InputPort

      Get an input port by its name.


   .. py:method:: get_out_port(name: str) -> grapycal.sobjects.port.OutputPort

      Get an output port by its name.


   .. py:method:: add_control(control_type: type[T], **kwargs) -> T

      Add a control to the node.


   .. py:method:: add_attribute(topic_name: str, topic_type: type[T1], init_value=None, is_stateful=True, editor_type: str | None = None, editor_args: dict | None = None, display_name: str | None = None) -> T1


   .. py:method:: expose_attribute(attribute: objectsync.Topic, editor_type, editor_args=None, display_name=None)

      Expose an attribute to the editor.
      Args:
          - attribute: The attribute to expose.

          - editor_type: The type of the editor to use. Can be ``text`` or ``list``.



   .. py:method:: _redirect_output()

      Returns a context manager that redirects stdout to the node's output stream.


   .. py:method:: _run_in_background(task: Callable[[], None], to_queue=True)

      Run a task in the background thread.


   .. py:method:: _run_directly(task: Callable[[], None])

      Run a task in the current thread.


   .. py:method:: run(task: Callable[[], None], background=True, to_queue=True, **kwargs)

      Run a task in the node's context i.e. the stdout and errors will be redirected to the node's output attribute and be displayed in front-end.

      Args:
          - task: The task to run.

          - background: If set to True, the task will be scheduled to run in the background thread. Otherwise, it will be run in the current thread immediately.
          
          - to_queue: This argument is used only when `background` is True. If set to True, the task will be pushed to the :class:`.BackgroundRunner`'s queue.            If set to False, the task will be pushed to its stack. See :class:`.BackgroundRunner` for more details.


   .. py:method:: _on_exception(e)


   .. py:method:: edge_activated(edge: grapycal.sobjects.edge.Edge, port: grapycal.sobjects.port.InputPort)

      Called when an edge on an input port is activated.


   .. py:method:: input_edge_added(edge: grapycal.sobjects.edge.Edge, port: grapycal.sobjects.port.InputPort)

      Called when an edge is added to an input port.


   .. py:method:: input_edge_removed(edge: grapycal.sobjects.edge.Edge, port: grapycal.sobjects.port.InputPort)

      Called when an edge is removed from an input port.


   .. py:method:: output_edge_added(edge: grapycal.sobjects.edge.Edge, port: grapycal.sobjects.port.OutputPort)

      Called when an edge is added to an output port.


   .. py:method:: output_edge_removed(edge: grapycal.sobjects.edge.Edge, port: grapycal.sobjects.port.OutputPort)

      Called when an edge is removed from an output port.


   .. py:method:: double_click()

      Called when the node is double clicked by an user.



.. py:class:: TextControl


   Bases: :py:obj:`grapycal.sobjects.controls.control.Control`

   To add a text control to a node, use the following code in the node:
   ```python
   self.add_control(TextControl, text='', label='', editable=True)
   ```

   .. py:attribute:: frontend_type
      :value: 'TextControl'

      

   .. py:method:: build(text: str = '', label: str = '', editable: bool = True)



.. py:class:: Edge


   Bases: :py:obj:`objectsync.SObject`

   .. py:attribute:: frontend_type
      :value: 'Edge'

      

   .. py:method:: build(tail: grapycal.sobjects.port.OutputPort | None = None, head: grapycal.sobjects.port.InputPort | None = None)


   .. py:method:: init()


   .. py:method:: on_tail_set(old_tail: grapycal.sobjects.port.Port | None, new_tail: grapycal.sobjects.port.Port | None)


   .. py:method:: on_head_set(old_head: grapycal.sobjects.port.Port | None, new_head: grapycal.sobjects.port.InputPort | None)


   .. py:method:: destroy() -> objectsync.sobject.SObjectSerialized


   .. py:method:: get_data() -> Any


   .. py:method:: push_data(data)


   .. py:method:: is_activated()


   .. py:method:: is_data_ready()



.. py:class:: InputPort


   Bases: :py:obj:`Port`

   .. py:method:: build(name='port', max_edges=64, display_name=None)


   .. py:method:: add_edge(edge: grapycal.sobjects.edge.Edge)


   .. py:method:: remove_edge(edge: grapycal.sobjects.edge.Edge)


   .. py:method:: is_all_edge_ready()


   .. py:method:: get_data()


   .. py:method:: get_one_data()



.. py:class:: OutputPort


   Bases: :py:obj:`Port`

   .. py:method:: build(name='port', max_edges=64, display_name=None)


   .. py:method:: init()


   .. py:method:: add_edge(edge: grapycal.sobjects.edge.Edge)


   .. py:method:: remove_edge(edge: grapycal.sobjects.edge.Edge)


   .. py:method:: push_data(data: Any = None, retain: bool = False)

      Push data to all connected edges.
      If retain is True, the data will be pushed to all future edges when they're connected as well.


   .. py:method:: disable_retain()

      Disable retain mode.



.. py:class:: FunctionNode


   Bases: :py:obj:`grapycal.sobjects.node.Node`

   .. py:attribute:: inputs
      :value: []

      

   .. py:attribute:: input_edge_limit
      :value: []

      

   .. py:attribute:: outputs
      :value: []

      

   .. py:attribute:: display_port_names
      :value: True

      

   .. py:method:: build_node()

      Create attributes, ports, and controls here.

      Note: 
          This method will not be called when the object is being restored. The child objects will be restored automatically instead of
      running this method again.


   .. py:method:: edge_activated(edge: grapycal.sobjects.edge.Edge, port)

      Called when an edge on an input port is activated.


   .. py:method:: task()


   .. py:method:: calculate(inputs: list[Any])
      :abstractmethod:

      Define the function of this node here.

      :param inputs: A list of lists. Each list contains the data from one input port. For example, if there is only one input port with two            edges connected, the value of inputs will be `[[data_from_edge_1, data_from_edge_2]]`.
      :return: A list of outputs. Each entry in the list will be pushed to one output port. For example, if there is only one output port,            the value of the return suold be `[data_to_port]`. If there are multiple edges connected to one output port,            they will all receive the same data.

      Examples::

          class SumNode(FunctionNode):
              inputs = ['items']
              outputs = ['sum']
              ...
              def calculate(self, inputs):
                  inp = inputs[0] # Retrieve the data from the input port
                  return [sum(inp)] # Return the sum of the data


   .. py:method:: input_edge_added(edge: grapycal.sobjects.edge.Edge, port)

      Called when an edge is added to an input port.


   .. py:method:: input_edge_removed(edge: grapycal.sobjects.edge.Edge, port)

      Called when an edge is removed from an input port.



.. py:class:: AdditionNode


   Bases: :py:obj:`grapycal.sobjects.functionNode.FunctionNode`

   .. py:attribute:: category
      :value: 'function/math'

      

   .. py:attribute:: inputs
      :value: ['items']

      

   .. py:attribute:: input_edge_limit
      :value: [None]

      

   .. py:attribute:: outputs
      :value: ['sum']

      

   .. py:attribute:: display_port_names
      :value: False

      

   .. py:method:: build_node()

      Create attributes, ports, and controls here.

      Note: 
          This method will not be called when the object is being restored. The child objects will be restored automatically instead of
      running this method again.


   .. py:method:: calculate(data)

      Define the function of this node here.

      :param inputs: A list of lists. Each list contains the data from one input port. For example, if there is only one input port with two            edges connected, the value of inputs will be `[[data_from_edge_1, data_from_edge_2]]`.
      :return: A list of outputs. Each entry in the list will be pushed to one output port. For example, if there is only one output port,            the value of the return suold be `[data_to_port]`. If there are multiple edges connected to one output port,            they will all receive the same data.

      Examples::

          class SumNode(FunctionNode):
              inputs = ['items']
              outputs = ['sum']
              ...
              def calculate(self, inputs):
                  inp = inputs[0] # Retrieve the data from the input port
                  return [sum(inp)] # Return the sum of the data



.. py:class:: SubtractionNode


   Bases: :py:obj:`grapycal.sobjects.functionNode.FunctionNode`

   .. py:attribute:: category
      :value: 'function/math'

      

   .. py:attribute:: inputs
      :value: ['a', 'b']

      

   .. py:attribute:: input_edge_limit
      :value: [None, None]

      

   .. py:attribute:: outputs
      :value: ['a-b']

      

   .. py:attribute:: display_port_names
      :value: False

      

   .. py:method:: build_node()

      Create attributes, ports, and controls here.

      Note: 
          This method will not be called when the object is being restored. The child objects will be restored automatically instead of
      running this method again.


   .. py:method:: calculate(data)

      Define the function of this node here.

      :param inputs: A list of lists. Each list contains the data from one input port. For example, if there is only one input port with two            edges connected, the value of inputs will be `[[data_from_edge_1, data_from_edge_2]]`.
      :return: A list of outputs. Each entry in the list will be pushed to one output port. For example, if there is only one output port,            the value of the return suold be `[data_to_port]`. If there are multiple edges connected to one output port,            they will all receive the same data.

      Examples::

          class SumNode(FunctionNode):
              inputs = ['items']
              outputs = ['sum']
              ...
              def calculate(self, inputs):
                  inp = inputs[0] # Retrieve the data from the input port
                  return [sum(inp)] # Return the sum of the data



.. py:class:: MultiplicationNode


   Bases: :py:obj:`grapycal.sobjects.functionNode.FunctionNode`

   .. py:attribute:: category
      :value: 'function/math'

      

   .. py:attribute:: inputs
      :value: ['items']

      

   .. py:attribute:: input_edge_limit
      :value: [None]

      

   .. py:attribute:: outputs
      :value: ['product']

      

   .. py:attribute:: display_port_names
      :value: False

      

   .. py:method:: build_node()

      Create attributes, ports, and controls here.

      Note: 
          This method will not be called when the object is being restored. The child objects will be restored automatically instead of
      running this method again.


   .. py:method:: calculate(data)

      Define the function of this node here.

      :param inputs: A list of lists. Each list contains the data from one input port. For example, if there is only one input port with two            edges connected, the value of inputs will be `[[data_from_edge_1, data_from_edge_2]]`.
      :return: A list of outputs. Each entry in the list will be pushed to one output port. For example, if there is only one output port,            the value of the return suold be `[data_to_port]`. If there are multiple edges connected to one output port,            they will all receive the same data.

      Examples::

          class SumNode(FunctionNode):
              inputs = ['items']
              outputs = ['sum']
              ...
              def calculate(self, inputs):
                  inp = inputs[0] # Retrieve the data from the input port
                  return [sum(inp)] # Return the sum of the data



.. py:class:: DivisionNode


   Bases: :py:obj:`grapycal.sobjects.functionNode.FunctionNode`

   .. py:attribute:: category
      :value: 'function/math'

      

   .. py:attribute:: inputs
      :value: ['a', 'b']

      

   .. py:attribute:: input_edge_limit
      :value: [None, None]

      

   .. py:attribute:: outputs
      :value: ['a/b']

      

   .. py:attribute:: display_port_names
      :value: False

      

   .. py:method:: build_node()

      Create attributes, ports, and controls here.

      Note: 
          This method will not be called when the object is being restored. The child objects will be restored automatically instead of
      running this method again.


   .. py:method:: calculate(data)

      Define the function of this node here.

      :param inputs: A list of lists. Each list contains the data from one input port. For example, if there is only one input port with two            edges connected, the value of inputs will be `[[data_from_edge_1, data_from_edge_2]]`.
      :return: A list of outputs. Each entry in the list will be pushed to one output port. For example, if there is only one output port,            the value of the return suold be `[data_to_port]`. If there are multiple edges connected to one output port,            they will all receive the same data.

      Examples::

          class SumNode(FunctionNode):
              inputs = ['items']
              outputs = ['sum']
              ...
              def calculate(self, inputs):
                  inp = inputs[0] # Retrieve the data from the input port
                  return [sum(inp)] # Return the sum of the data



.. py:class:: LambdaNode


   Bases: :py:obj:`grapycal.Node`

   .. py:attribute:: category
      :value: 'function'

      

   .. py:method:: build_node()

      Create attributes, ports, and controls here.

      Note: 
          This method will not be called when the object is being restored. The child objects will be restored automatically instead of
      running this method again.


   .. py:method:: init()

      This method is called after the node is built and its ports and controls are created. Use this method if you want to do something after
      the node is built.


   .. py:method:: on_input_arg_added(arg_name, position)


   .. py:method:: on_input_arg_removed(arg_name, position)


   .. py:method:: on_output_added(name, position)


   .. py:method:: on_output_removed(name, position)


   .. py:method:: input_edge_added(edge: grapycal.sobjects.edge.Edge, port: grapycal.sobjects.port.InputPort)

      Called when an edge is added to an input port.


   .. py:method:: edge_activated(edge: grapycal.sobjects.edge.Edge, port: grapycal.sobjects.port.InputPort)

      Called when an edge on an input port is activated.


   .. py:method:: calculate()



